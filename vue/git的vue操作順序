1 安裝Node.js
輸入命令看安裝沒有 使用淘寶npn ：$ npm install -g cnpm --registry=https://registry.npm.taobao.org
2vue-cli
项目构建工具安裝：npm install -g vue-cli
如果用npm下载速度慢，可以使用cnpm.
3第一个vue项目：vue init webpack vue-todos
運行項目：輸入命令
cd vue-todos
npm install
npm run dev
-------------------------------------------------------------------------------------------------------------------------------------------------------
2.1 需求分析
{
id: String,  //单条待办项唯一标示
titie: String, // 标题
count: Number  // 未完成待办项数目
isDelete: Boolean, // 是否删除(物理删除)
locked: Boolean, // 是否锁定
record : [  // 代办项纪录列表
    text: String,  // 文字内容
    isDelete: Boolean, // 是否删除(物理删除)
    checked: Boolean // 是否完成
]
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
注: 下文中的 api 指接口名,params指传入数据，data指返回数据

2.4 组件分析
vue的组件一般分为如下4种:

接入型 比如说一个容器组件,它里面包含了其他的组件，它本身只承担一个布局容器的作用
展示型 纯展示型的数据，它能接收数据，展示出来，但是无法与用用户进行交互
交互型 比如各类加强版的表单组件，通常强调复用
功能型 比如 <router-view>，<transition>，作为一种扩展、抽象机制存在。
app.vue   // 最外层根组件 接入型
layouts.vue  // 布局组件  接入型 接入其他组件
todos.vue  // 左侧列表    交互型组件
lists.vue  // 右侧内容    交互型组件
item.vue  // 待办单项组件   交互型组件

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.1.2 项目结构
├── build              // 构建服务和webpack配置
├── config             // 项目不同环境的配置
├── dist               // 项目build目录
├── index.html         // 项目入口文件
├── package.json       // 项目配置文件
├── src                // 生产目录
│   ├── assets         // 图片资源
│   ├── common *          // 公共的css js 资源
│   ├── components     // 各种组件 
│   ├── moke *           // 本地静态数据管理文件
│   ├── App.vue         // 主页面
│   ├── vuex *           // vuex状态管理器
│   ├── router    // 路由配置器
│   └── main.js        // Webpack 预编译入口
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.1.5 ‘.vue’文件
Vue自定义了一种后缀名名字为.vue文件,它将html, js, css 整合成一个文件,和里面 template script style三个区别分别依次对应。
<template>
<!--这里写 html -->
<template/>
<script>
 export default {};
 // 这里写js
</script>
<style lang = "less" scoped>
 <!--这里写css-->
</style>
template里面最外层必须是只有一个容器
script 中的 export default {} 即导出这个组件，外部可以引用。
style 中的 lang 指额外表示支持的语言可以让编辑器识别,scoped 指这里写的css只适用于该组件。

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3.1.6 新增layouts.vue(布局组件)

3.1.7 修改router(路由)
vue-router有什么用?
它的作用在于路由设置，用于设置页面跳转时的路径设置,它的工作原理也很简,将组件(components)映射到路由(routes)，然后告诉 vue-router 在哪里渲染它们。
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.1.9列表渲染

模板语法
列表渲染
条件渲染
data函数





小结
我们知道到了什么是vue.
理解了Vue实例
学会了安装less。
知道了 .vue 文件 template script style三个区别分别用些编写html, js, css。
知道了基本的路由的配置,vue-router简单例子
知道了什么是组件？
必须理解的重点:
模板语法
列表渲染
条件渲染
data函数
表单控件绑定
自定义事件
事件处理器
父子组件通信之Prop
